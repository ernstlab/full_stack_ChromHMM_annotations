# All code is provided under the MIT Open Acess License Copyright 2021 Ha Vu 

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
import os
import glob
import pandas as pd 
import numpy as np
raw_segmentation_folder = "../../ROADMAP_aligned_reads/chromHMM_model/model_100_state/hg19_segmentations/" # TO BE REPLACE if new user want to reproduce the file: the folder where you store the file showing the full-stack annotation bed file (https://public.hoffman2.idre.ucla.edu/ernst/1G6UT/hg19_genome_100_segments.bed.gz)
raw_segmentation_fn = os.path.join(raw_segmentation_folder, "genome_100_segments.bed.gz")# TO BE REPLACE if new user want to reproduce the file: rename the file based on how you rename the file storing full-stack annotations
GO_output_folder = '../../ROADMAP_aligned_reads/chromHMM_model/model_100_state/gene_ontology_analysis/GREAT' # TO BE REPLACE if new user want to reproduce the file: Where you want to store the output
state_annot_fn = '../../ROADMAP_aligned_reads/chromHMM_model/model_100_state/figures/supp_excel/state_annotations_processed.csv' # TO BE REPLACE if new user want to reproduce the file: where you save the csv file that we provide with all the characterizations of full-stack states.
ha_share_folder="/u/project/ernst/PUBLIC_SHARED/havu73" # the folder where if we send any files to this folder, the file immediately a link that can be easily be shared online. The reason we need to transport files to this folder is because in order to get output from GREAT, we need to be able to share the content of the bed file (with corrdinates of genomic positions associated with a state). When we transport the files online, we can easily run greatBatchQuery.py (provided by the creator of GREAT) to get the results for multiple states at the same time. 
NUM_STATE = 100
STATE_LIST = list(map(lambda x: x+1, range(NUM_STATE))) 
STATE_LIST_minus_68 = list(map(lambda x: x+1, range(67))) + list(map(lambda x: x+1, range(68, 100))) # created this list because during the process of running this pipeline, we realized that one state (numbered 68) could never get valid output from GREAT. The software (GREAT) kept failing to do GO analysis for this state. 
jobList='jobList'
GO_TYPE_LIST = ['GO_BP', 'GO_CC', 'GO_MF']
STATE_GROUP_LIST = ['DNase', 'HET', 'TSS', 'acetylations', 'enhancers', 'exon', 'others', 'polycomb_repressed', 'promoters', 'quescient', 'transcribed_and_enhancer', 'transcription', 'weak_enhancers', 'weak_promoters', 'weak_transcription', 'znf']
def get_remaining_state_list():
	exist_output_fn_list = glob.glob(GO_output_folder + '/state_E*_GO.tsv.gz')
	exist_output_state_list = list(map(lambda x: int(x.split('/')[-1].split('_')[1][1:]), exist_output_fn_list))
	remain_state_list = set(STATE_LIST_minus_68) - set(exist_output_state_list)
	remain_state_list = list(remain_state_list)
	return remain_state_list

rule all:
	input:
		jobList
		expand(os.path.join(GO_output_folder, 'state_E{state}_GO.tsv.gz'), state = get_remaining_state_list()), # from get_GREAT_output
		expand(os.path.join(GO_output_folder, 'barplot', 'top10_GO_terms_all_states.txt.gz'))

rule get_one_state_bed: # given the full-stack state annotation, we will create one bed file per state where the bed file outline the genomic coordinates of position associated with the corresponding state.
	input:	
		raw_segmentation_fn,
	output:
		os.path.join(raw_segmentation_folder, 'state_E{state}.bed.gz')
	params:
		output_fn_no_gz = os.path.join(raw_segmentation_folder, 'state_E{state}.bed')
	shell:
		"""
		zcat {raw_segmentation_fn} | awk -F'\t' -v s="E{wildcards.state}" '{if ($4 == s) print $0}' | sort -k1,1 -k2,2n > {params.output_fn_no_gz}
		gzip {params.output_fn_no_gz}
		"""

rule transfer_state_bed_to_online_folder: 
	input:	
		expand(os.path.join(raw_segmentation_folder, 'state_E{{state}}.bed.gz'), state = STATE_LIST) # from get_one_state_bed
	output:
		expand(os.path.join(ha_share_folder, 'full_stack', 'one_state', 'state_E{{state}}.bed.gz'))
	params:
		output_folder = os.path.join(ha_share_folder, 'full_stack', 'one_state')
	shell:	
		"""
		cp {raw_segmentation_folder}/state_E*.bed.gz {params.output_folder}
		"""

def get_input_url_prefix():
	ha_url = 'https://public.hoffman2.idre.ucla.edu/ernst/2K9RS/full_stack/one_state/'
	ha_url = ha_url.replace('/','%2F')
	ha_url = ha_url.replace(':', '%3A')
	return ha_url

rule create_jobList_for_GREAT:
	input:
		expand(os.path.join(ha_share_folder, 'full_stack', 'one_state', 'state_E{state}.bed.gz'), state = STATE_LIST) #from transfer_state_bed_to_online_folder
	output:
		(jobList),
	params:
		input_url_prefix=get_input_url_prefix(),
		GREAT_link="http://bejerano.stanford.edu/great/public/cgi-bin/greatStart.php",
		output_type="batch",
		species="hg19",
		request_sender="havu73"
	shell:
		"""
		rm -f {output[0]} # so we can create new file
		for s in `seq 1 {NUM_STATE}`
		do
			output_fn={GO_output_folder}/state_E${{s}}_GO.tsv.gz
			if [ ! -f ${{output_fn}} ]
			then
				request_name=state_E${{s}}
				request_url={params.input_url_prefix}%2Fstate_E${{s}}.bed.gz
				http_request="{params.GREAT_link}?outputType={params.output_type}&requestSpecies={params.species}&requestName=${{request_name}}&requestSender={params.request_sender}&requestURL=${{request_url}}"
				echo ${{http_request}}
				echo ${{output_fn}} ${{http_request}} >> {output[0]}
			fi
		done
		"""

rule get_GREAT_output: # send requests to get results from GREAT
	# Note: this rule takes several times of rerunning. For states 7, 44, 56, 68 , 89, 90 the direct download using wget will not work because they span a lot of genes, and will therefore not result in the most correct patterns of enrichments
	# To rerun, we just need to change the input to all function to jobList and just do python greatBatchQuerry.py direclty on the terminal
	input:
		jobList # from create_jobList_for_GREAT
	output:
		expand(os.path.join(GO_output_folder, 'state_E{state}_GO.tsv.gz'), state = get_remaining_state_list())
	shell:
		"""
		python greatBatchQuery.py {input}
		"""

rule process_GREAT_output: # process the raw output of GREAT and only get the results of the top #num_top_GO go terms for each state
	input:
		expand(os.path.join(GO_output_folder, 'state_E{state}_GO.tsv.gz'), state = STATE_LIST_minus_68) # beacuse we tried at all cost to get the results for states 68 and still could not get it due to some errors from the server's end
	output:
		expand(os.path.join(GO_output_folder, 'combined_all_states', '{go_type}', '{state_group}_topGO.txt.gz'), go_type = GO_TYPE_LIST, state_group = STATE_GROUP_LIST),
	params:
		num_max_GO_terms = 1,
		output_folder = os.path.join(GO_output_folder, 'combined_all_states'),
	shell:
		"""
		python process_GREAT_output_all_states.py {GO_output_folder} {params.num_max_GO_terms} {params.output_folder}
		"""

rule draw_barplot_per_state:
	input: 
		expand(os.path.join(GO_output_folder, 'state_E{state}_GO.tsv.gz'), state = STATE_LIST_minus_68) # beacuse we tried at all cost to get the results for states 68 and still could not get it due to some errors from the server's end
	output:
		expand(os.path.join(GO_output_folder, 'barplot', 'top10_GO_terms_all_states.txt.gz')) # bsides this file, running this rule will produce 99 .pdf files showing the barplots of gene ontology analysis for each full-stack state.
	params:
		output_folder = os.path.join(GO_output_folder, 'barplot'),
		num_max_GO_terms = 10, # for each type of GO (GO_BP, GO_CC, GO_MF), report the top 10 most enriched terms of each type with each full-stack state
		num_terms_to_plot = 10, # for each state, plot the top 5 most enriched GO_MF and top 5 GO_BP terms and their negative log10 p values.  
	shell:
		python draw_barplot_per_state.py GO_output_folder {params.num_max_GO_terms} {params.output_folder} {params.num_terms_to_plot} {state_annot_fn}