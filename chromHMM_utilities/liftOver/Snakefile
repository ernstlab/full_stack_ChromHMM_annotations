# Copyright 2021 Ha Vu (havu73@ucla.edu)

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

org_assembly = 'hg19'
end_assembly = 'hg38' # <TO_BE_FILLED>, the target assembly that we want to convert the full-stack annotations into, hg38 or Mm10, etc. It should match the .over.chain.gz files used for liftOver (if hg19ToMm10.over.chain.gz then Mm10, not mm10).
org_segment_dir = '' # <TO_BE_FILLED>, the relative path to the folder where file genome_100_segments.bed.gz is stored in your machine
org_segment_fn = os.path.join(org_segment_dir, 'genome_100_segments.bed.gz')
org_sorted_fn = os.path.join(org_segment_dir, 'genome_100_segments_sorted.bed.gz')
org_segment_200bp_fn = os.path.join(org_segment_dir, 'genome_100_200bp_ordered.bed.gz')
liftOver_dir = './' # we provided liftOver executable file in this folder, that's why we put down the current directory here. Originally, liftOver was downloaded from UCSC genome browser website http://hgdownload.soe.ucsc.edu/admin/exe/
end_segment_dir = '' # <TO_BE_FILLED>, the relative path to the output folder of this liftOver procedure
end_segment_raw = os.path.join(end_segment_dir, end_assembly + '_100_raw_segments.bed.gz')
unmapped_fn = os.path.join(end_segment_dir, 'unmapped_' + org_assembly + '_to_' + end_assembly + '.gz')
end_segment_last =   os.path.join(end_segment_dir, end_assembly + '_100_no_overlap_from_' + org_assembly + '.bed.gz')
CHROMOSOME_LIST = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X', 'Y', 'M']

rule all:
	input:
		end_segment_last,

rule sort_org_segment: # sort the segmentation files based on genomic coordinates
	input:
		org_segment_fn,
	output:
		temp(org_sorted_fn),
	params: 
		output_no_gz = org_sorted_fn[:-3]
	shell:
		"""
		./reorganize_bed_file.sh {input} {params.output_no_gz} # the code automatically gzip the file
		gzip {params.output_no_gz}
		"""

rule org_200bp: # write the segmentation file into a format such that each line corresponds to a 200-bp segment
	input:
		org_sorted_fn,
	output:	
		org_segment_200bp_fn
	shell:
		"""
		python change_segmentation_to_200bp_segmentation_for_liftOver.py {input} {output} # this code can be better off run using pypy if you have it, that would speed things up by ~5 folds, the code will write to .gz file automatically
		"""

rule liftOver:
	input:
		org_segment_200bp_fn # from rule org_200bp
	output:
		end_segment_raw
	params:	
		map_fn = os.path.join(liftOver_dir, org_assembly + 'To' + end_assembly + '.over.chain.gz'),
		output_no_gz = end_segment_raw[:-3],
		unmapped_fn_no_gz = unmapped_fn[:-3]
	shell:
		"""
		{liftOver_dir}/liftOver {input} {params.map_fn} {params.output_no_gz} {params.unmapped_fn_no_gz}
		gzip {params.output_no_gz}
		gzip {params.unmapped_fn_no_gz}
		"""

rule organize_one_chrom_end_raw:
	input:	
		end_segment_raw # from rule liftOver
	output:
		temp(os.path.join('temp_raw_end_chr_{chrom}'))
	params:
		chrom = 'chr{chrom}',
	shell:	
		"""
		zcat {input} | awk -F'\t' -v c="{params.chrom}" '{{if ($1 == c) print $0}}' | sort -k2n > {output}
		"""

rule rid_overlapping_from_raw:  # given one chrom's end_raw data, we would like to get rid of lines where the end segmentation is from multiple segments in the org segmentation
	input:
		os.path.join('temp_raw_end_chr_{chrom}') # from rule organize_one_chrom_end_raw
	output:
		temp(os.path.join('temp_remove_indices_chr_{chrom}')) 
	shell:	
		"""
		python find_overlapping_segments_from_liftOver_one_chrom.py {input} {output}
		"""

rule combine_end_segment:
	input:
		expand(os.path.join('temp_remove_indices_chr_{chrom}'), chrom = CHROMOSOME_LIST) ,# from rule rid_overlapping_from_raw
		expand(os.path.join('temp_raw_end_chr_{chrom}'), chrom = CHROMOSOME_LIST)
	output:	
		end_segment_last,
	params:	
		output_no_gz = end_segment_last[:-3],
		chrom_list_bash_format = ' '.join(CHROMOSOME_LIST),
	shell:
		"""
		rm -f {params.output_no_gz}
		for chrom in {params.chrom_list_bash_format}
		do
			raw_fn=temp_raw_end_chr_${{chrom}}
			remove_fn=temp_remove_indices_chr_${{chrom}}
			awk \'NR == FNR {{a[$0]; next}} {{if (! (FNR in a)) {{print}}}}\' ${{remove_fn}} ${{raw_fn}} >> {params.output_no_gz} # write out lines in the raw_fn that are not in the list of indices in the remove_fn
		done
		gzip -f {params.output_no_gz}
		"""
