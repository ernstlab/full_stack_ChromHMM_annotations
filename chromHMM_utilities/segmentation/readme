This folder contains files that are useful for analyzing the segmentation file of states' annotation, based on output from ChromHMM
|__ get_segmentation_file_with_color.py: create a bed files with the chroamtin state annotations from either the full-stack/concatenated/ independent models FOR A SPECIFIC GENOMIC REGION, where we can input into UCSC genome browser and get visualization of the chromatin states, colored and annotated. 
Terminal input:  ./get_segmentation_file_with_color.py <segment_fn: fn of state segmentation file> <state_annot_fn: File state_annotations_processed.csv that we provide with this repository, showing the states' chracterizations> <output_fn> <track_name: track name that will be displaced on ucsc genome browser. If you do not understand what this mean, just use full-stack> <chrom(optional)> <start_bp(optional)> <end_bp(optional)>. The chrom, start_bp and end_bp variables can be specified if users is only interested in viewing the segmentation in only one specific regions of the genome, and do not want to load the segmentation data of the entire genome into genome browsers (computational cost). This file will create an .bed.gz file, which you can transfer to genome browser (UCSC is what we used) to view for your favorite loci
Todo: modify this code to take in user input arguments using argparse. Right now it's quite bulky code to take input arguments.
|__ compress_segmentation_data.py: if your segmentation is currently not compressed (if there are rows that represent consecutive segments on the genome, and get annotated to the same state), then this file will compress the segmentation data. 
python compress_segmentation_data.py --help
usage: compress_segmentation_data.py [-h] --segment_bed_fn SEGMENT_BED_FN --output_fn OUTPUT_FN

This code takes in a segmentation file and reaarranges the rows such that if consecutive genomic bins
are annotated as the same state, they will be combined. At the same time, the output file will be
sorted by chrom, start_bp such that it will be readily available to use for downstream analysis with
bedtools or pybedtools

optional arguments:
  -h, --help            show this help message and exit
  --segment_bed_fn SEGMENT_BED_FN
                        input segment_bed_fn
  --output_fn OUTPUT_FN
                        output_fn